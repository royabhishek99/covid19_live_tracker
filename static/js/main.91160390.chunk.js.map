{"version":3,"sources":["InfoBox.js","InfoAccodion.js","Table.js","util.js","Map.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","gutterBottom","InfoAccodion","sub_title","left_heading","right_heading","right_total","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","variant","align","numeral","format","Table","countries","map","country","casesTypeColors","hex","multiplier","recovered","rgb","half_op","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","showMapData","casesType","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","TileLayer","url","attribution","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","fetchData","fetch","then","response","json","useEffect","length","datasets","backgroundColor","App","setCountries","setCountry","setCountryInfo","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","varient","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","critical","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91160390.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} in Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;","import React from 'react'\nimport { ExpandMore } from '@material-ui/icons';\nimport {Typography, Accordion,AccordionSummary, AccordionDetails  } from '@material-ui/core';\nimport numeral from 'numeral';\nimport './InfoAccodion.css'\n\nexport default function InfoAccodion({title, sub_title, total, left_heading, right_heading, right_total}) {\n    return (\n        <div className=\"main\">\n            <Accordion >\n                <AccordionSummary className=\"heading\" expandIcon={<ExpandMore />}>\n                    {title}\n                </AccordionSummary>\n\n                <AccordionDetails>\n                    <div className=\"info\">\n                        <Typography className=\"AccordionSubTitle\" variant=\"h4\" align=\"center\">\n                        {numeral(total).format(\"0,0\")}\n                        </Typography>\n                        <Typography className=\"AccordionTotal\" variant=\"h5\" align=\"center\">\n                            {sub_title}\n                        </Typography>\n                    </div>\n                </AccordionDetails>\n\n                <AccordionDetails>\n                    <div className=\"moreInfo\">\n                            <div className=\"left\">\n                                <Typography variant=\"h5\" align=\"center\">\n                                    {numeral(total - right_total).format(\"0,0\")}\n                                </Typography>\n                                <Typography className=\"AccordionTotal\" variant=\"h6\" align=\"center\">\n                                    {left_heading}\n                                </Typography>\n                            </div>\n                            <div className=\"right\">\n                                <Typography variant=\"h5\" align=\"center\">\n                                    {numeral(right_total).format(\"0,0\")}\n                                </Typography>\n                                <Typography className=\"AccordionTotal\" variant=\"h6\" align=\"center\">\n                                    {right_heading}\n                                </Typography>\n                            </div>\n                        </div>\n                </AccordionDetails>\n            </Accordion>\n        </div>\n        \n    )\n}\n","import React from 'react'\nimport './Table.css';\nimport numeral from 'numeral';\n\nexport default function Table({countries}) {\n    return (\n        <div className=\"table\">\n            {countries.map(({country, cases}) => (\n                <tr>\n                    <td>{country}</td>\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n                </tr>\n            ))}          \n        </div>\n    )\n}\n","import React from \"react\";\nimport {Circle, Popup} from \"react-leaflet\";\nimport numeral from \"numeral\";\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#CC1034\",\n      multiplier: 400,\n    },\n    recovered: {\n      hex: \"#7dd71d\",\n      rgb: \"rgb(125, 215, 29)\",\n      half_op: \"rgba(125, 215, 29, 0.5)\",\n      multiplier: 600,\n    },\n    deaths: {\n      hex: \"#fb4443\",\n      rgb: \"rgb(251, 68, 67)\",\n      half_op: \"rgba(251, 68, 67, 0.5)\",\n      multiplier: 1000,\n    },\n};\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n\n    sortedData.sort((a,b) => (a.cases > b.cases ? -1 : 1));\n    return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showMapData = (data, casesType=\"cases\") => (\n    data.map((country) => (\n        <Circle\n            center ={[country.countryInfo.lat, country.countryInfo.long]}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType].hex}\n            fillOpacity={0.4}\n            radius={\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n              }>\n            <Popup>\n            <div className=\"info-container\">\n                <div\n                    className=\"info-flag\"\n                    style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n                ></div>\n                <div className=\"info-name\">{country.country}</div>\n                <div className=\"info-confirmed\">\n                    Cases: {numeral(country.cases).format(\"0,0\")}\n                </div>\n                <div className=\"info-recovered\">\n                    Recovered: {numeral(country.recovered).format(\"0,0\")}\n                </div>\n                <div className=\"info-deaths\">\n                    Deaths: {numeral(country.deaths).format(\"0,0\")}\n                </div>\n            </div>\n            </Popup>\n\n        </Circle>\n    ))\n);","import React from 'react';\nimport './Map.css'\nimport {Map as LeafletMap, TileLayer} from 'react-leaflet';\nimport {showMapData} from './util.js';\n\n\nexport default function Map({countries, casesType, center, zoom}) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                 attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'>\n                </TileLayer >\n                {showMapData(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n","import React, {useState, useEffect} from 'react';\nimport {Line} from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\n\nconst buildChartData = (data, casesType='cases') => {\n  const chartData = [];\n  let lastDataPoint;\n\n  for(let date in data.cases) {\n    if(lastDataPoint){\n      const newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint\n      }\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  };\n  return chartData;\n};\n\n\nfunction LineGraph() {\n  const [data, setData] = useState({});\n\n  const fetchData = async() => {\n    await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n    .then(response =>  response.json())\n    .then(data => {\n      const chartData = buildChartData(data, 'cases');\n      setData(chartData);\n    });\n  }\n\n  useEffect(() => {\n    fetchData();\n    \n  }, [])\n  \n  return (\n    <div>\n      {data.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default LineGraph\n\n","import React, { useEffect, useState } from 'react';\nimport { MenuItem,FormControl, Select, Card, CardContent} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport InfoAccodion from './InfoAccodion';\nimport Table from './Table';\nimport Map from './Map';\nimport LineGraph from './LineGraph';\nimport './App.css';\nimport numeral from \"numeral\";\nimport { sortData,prettyPrintStat } from './util';\nimport \"leaflet/dist/leaflet.css\";\n\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\")\n  const [countryInfo, setCountryInfo] = useState({});\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n \n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then((response) => response.json())\n    .then((data)=>{\n      setCountryInfo(data);\n    })\n  },[])\n\n  useEffect(() => {\n    //the code **ONLY** runs once when app/component loads, if a variable is put in [] it runs once when app loads and once that variable changes\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data)=> {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n        \n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      })\n    };\n    getCountriesData();\n  }, [countries]);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    const url = \n      countryCode === \"worldwide\" \n      ? 'https://disease.sh/v3/covid-19/all' : \n      `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    \n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n      if(countryCode !== \"worldwide\" ){\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      }\n      else{\n        setMapCenter({ lat: 34.80746, lng: -40.4796})\n      }\n      setMapZoom(2);\n    })\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-left\">\n\n            <div className = \"app_header\">\n              {/*Title + selector*/}\n              <h1>COVID-19 LIVE TRACKER</h1>\n              <FormControl className=\"app_dropdown\">\n                <Select varient = \"outlined\" onChange={onCountryChange} value = {country}>\n                      <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                      {\n                        countries.map(country => (\n                          <MenuItem value = {country.value}>{country.name}</MenuItem>\n                        ))\n                      }\n                </Select>\n              </FormControl>\n            </div>\n\n            <div className=\"app_stats\">\n                <InfoBox\n                onClick={(e) => setCasesType(\"cases\")}\n                title=\"Current Active Cases\"\n                isRed\n                active={casesType === \"cases\"}\n                cases={prettyPrintStat(countryInfo.todayCases)}\n                total={numeral(countryInfo.cases).format(\"0.0a\")}\n              />\n              <InfoBox\n                onClick={(e) => setCasesType(\"recovered\")}\n                title=\"Recent Recoveries\"\n                active={casesType === \"recovered\"}\n                cases={prettyPrintStat(countryInfo.todayRecovered)}\n                total={numeral(countryInfo.recovered).format(\"0.0a\")}\n              />\n              <InfoBox\n                onClick={(e) => setCasesType(\"deaths\")}\n                title=\"Recent Deaths\"\n                isRed\n                active={casesType === \"deaths\"}\n                cases={prettyPrintStat(countryInfo.todayDeaths)}\n                total={numeral(countryInfo.deaths).format(\"0.00a\")}\n              />\n            </div>\n\n            <div className=\"app_stats2\">\n              <InfoAccodion title=\"Active\" sub_title=\"Currently active cases\" total={countryInfo.active}\n                            left_heading=\"in Mild Condition\" \n                            right_heading=\"Serious or Critical\" right_total={countryInfo.critical}></InfoAccodion>\n              <InfoAccodion title=\"Closed\" sub_title=\"Cases with an outcome\" total={countryInfo.recovered}\n                            left_heading=\"Recovered/Discharged\"\n                            right_heading=\"Deaths\" right_total={countryInfo.deaths}\n                            ></InfoAccodion>\n            </div>\n\n            \n\n            {/*Map*/}\n            <Map \n              casesType = {casesType}\n              countries={mapCountries}\n              center={mapCenter}\n              zoom = {mapZoom}\n            />\n        \n\n      </div>\n\n      <Card className=\"app_right\">\n        <CardContent>\n\n          <div className=\"app__information\">\n            <h3>Live Cases (Country Wise)</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n\n    </div>\n      \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}